"use strict";(()=>{var e={};e.id=992,e.ids=[992],e.modules={145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},8678:e=>{e.exports=import("pg")},6249:(e,t)=>{Object.defineProperty(t,"l",{enumerable:!0,get:function(){return function e(t,a){return a in t?t[a]:"then"in t&&"function"==typeof t.then?t.then(t=>e(t,a)):"function"==typeof t&&"default"===a?t:void 0}}})},2296:(e,t,a)=>{a.r(t),a.d(t,{config:()=>f,default:()=>g,routeModule:()=>h});var o={};a.r(o),a.d(o,{default:()=>i});var r=a(1802),s=a(7153),n=a(6249);async function i(e,t){if(e.headers.authorization!==`Bearer ${process.env.CRON_SECRET}`)return t.status(401).json({error:"Unauthorized"});console.log("===== Starting unified data update job =====");try{let{Pool:e}=await Promise.resolve().then(a.bind(a,8678)),o=new e({connectionString:process.env.NEON_DATABASE_URL,ssl:{rejectUnauthorized:!1}}),r=await o.connect();try{await r.query("BEGIN"),console.log("Step 1: Updating stock data..."),await c(r),console.log("Step 2: Updating dynamic tags..."),await l(r),await r.query("COMMIT"),console.log("===== All updates completed successfully ====="),t.status(200).json({success:!0,message:"All data updated successfully",timestamp:new Date().toISOString()})}catch(e){throw await r.query("ROLLBACK"),e}finally{r.release(),await o.end()}}catch(e){console.error("Update job failed:",e),t.status(500).json({error:"Update failed",message:e.message,timestamp:new Date().toISOString()})}}async function c(e){try{let t=await p(process.env.POLYGON_API_KEY);if(!t||0===t.length){console.log("No Polygon data available, skipping stock updates");return}for(let a of(console.log(`Processing ${t.length} stocks from Polygon`),t.slice(0,100)))try{let t=a.T,o=a.c,r=((a.c-a.o)/a.o*100).toFixed(2),s=await d(t,process.env.FINNHUB_API_KEY);await e.query(`UPDATE stocks SET 
                     last_price = $1, 
                     change_percent = $2, 
                     market_cap = $3,
                     last_updated = NOW()
                     WHERE ticker = $4`,[o,r,s?.marketCapitalization,t])}catch(e){console.error(`Error updating stock ${a.T}:`,e.message);continue}console.log("Stock data update completed")}catch(e){throw console.error("Stock data update failed:",e),e}}async function l(e){try{let{rows:t}=await e.query(`SELECT ticker, name_zh, sector_zh, market_cap, last_price, 
             change_percent, volume, pe_ratio 
             FROM stocks 
             WHERE last_price IS NOT NULL 
             ORDER BY market_cap DESC NULLS LAST 
             LIMIT 200`);for(let a of(console.log(`Processing dynamic tags for ${t.length} stocks`),t))try{let t=function(e){let t=[];if(e.market_cap&&(e.market_cap>2e11?t.push("超大盘股"):e.market_cap>5e10?t.push("大盘股"):e.market_cap>1e10?t.push("中盘股"):e.market_cap>2e9?t.push("小盘股"):t.push("微盘股")),e.last_price&&(e.last_price>500?t.push("高价股"):e.last_price>100?t.push("中价股"):e.last_price<10&&t.push("低价股")),e.change_percent){let a=parseFloat(e.change_percent);a>5?t.push("强势上涨"):a>2?t.push("温和上涨"):a<-5?t.push("大幅下跌"):a<-2&&t.push("温和下跌")}return e.sector_zh&&t.push(e.sector_zh),t}(a);for(let o of(await e.query(`DELETE FROM stock_tags 
                     WHERE stock_ticker = $1 
                     AND tag_id IN (SELECT id FROM tags WHERE type = 'dynamic')`,[a.ticker]),t))await u(e,a.ticker,o,"dynamic")}catch(e){console.error(`Error updating tags for ${a.ticker}:`,e.message);continue}console.log("Dynamic tags update completed")}catch(e){throw console.error("Dynamic tags update failed:",e),e}}async function u(e,t,a,o="dynamic"){try{let r;let{rows:s}=await e.query("SELECT id FROM tags WHERE name = $1 AND type = $2",[a,o]);if(s.length>0)r=s[0].id;else{let{rows:t}=await e.query("INSERT INTO tags (name, type) VALUES ($1, $2) RETURNING id",[a,o]);r=t[0].id}await e.query(`INSERT INTO stock_tags (stock_ticker, tag_id) 
             VALUES ($1, $2) 
             ON CONFLICT (stock_ticker, tag_id) DO NOTHING`,[t,r])}catch(e){console.error(`Error applying tag ${a} to ${t}:`,e.message)}}async function p(e){let t=new Date;for(let a=0;a<7;a++){let a=t.toISOString().split("T")[0],o=`https://api.polygon.io/v2/aggs/grouped/locale/us/market/stocks/${a}?adjusted=true&apiKey=${e}`;try{console.log(`[Polygon] Attempting snapshot for ${a}...`);let e=await fetch(o,{signal:AbortSignal.timeout(15e3)});if(e.ok){let t=await e.json();if(t.results&&t.results.length>0)return console.log(`[Polygon] Success! Got ${t.results.length} stocks for ${a}`),t.results}}catch(e){console.log(`[Polygon] Failed for ${a}: ${e.message}`)}t.setDate(t.getDate()-1)}return null}async function d(e,t){try{let a=`https://finnhub.io/api/v1/stock/metric?symbol=${e}&metric=all&token=${t}`,o=await fetch(a,{signal:AbortSignal.timeout(1e4)});if(o.ok)return(await o.json()).metric}catch(t){console.log(`[Finnhub] Failed for ${e}: ${t.message}`)}return null}let g=(0,n.l)(o,"default"),f=(0,n.l)(o,"config"),h=new r.PagesAPIRouteModule({definition:{kind:s.x.PAGES_API,page:"/api/update-all-data",pathname:"/api/update-all-data",bundlePath:"",filename:""},userland:o})},7153:(e,t)=>{var a;Object.defineProperty(t,"x",{enumerable:!0,get:function(){return a}}),function(e){e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE"}(a||(a={}))},1802:(e,t,a)=>{e.exports=a(145)}};var t=require("../../webpack-api-runtime.js");t.C(e);var a=t(t.s=2296);module.exports=a})();