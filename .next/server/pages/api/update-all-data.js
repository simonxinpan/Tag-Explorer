"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/update-all-data";
exports.ids = ["pages/api/update-all-data"];
exports.modules = {

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fupdate-all-data&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cupdate-all-data.js&middlewareConfigBase64=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fupdate-all-data&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cupdate-all-data.js&middlewareConfigBase64=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   handler: () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/api-utils */ \"(api-node)/./node_modules/next/dist/server/api-utils/index.js\");\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_update_all_data_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pages\\api\\update-all-data.js */ \"(api-node)/./pages/api/update-all-data.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(api-node)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(api-node)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_update_all_data_js__WEBPACK_IMPORTED_MODULE_4__]);\n_pages_api_update_all_data_js__WEBPACK_IMPORTED_MODULE_4__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n// Import the userland code.\n\n\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_pages_api_update_all_data_js__WEBPACK_IMPORTED_MODULE_4__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_pages_api_update_all_data_js__WEBPACK_IMPORTED_MODULE_4__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/update-all-data\",\n        pathname: \"/api/update-all-data\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_update_all_data_js__WEBPACK_IMPORTED_MODULE_4__,\n    distDir: \".next\" || 0,\n    projectDir:  false || ''\n});\nasync function handler(req, res, ctx) {\n    let srcPage = \"/api/update-all-data\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {}\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return;\n    }\n    const { query, params, prerenderManifest } = prepareResult;\n    try {\n        const method = req.method || 'GET';\n        const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.getTracer)();\n        const activeSpan = tracer.getActiveScopeSpan();\n        const onRequestError = routeModule.instrumentationOnRequestError.bind(routeModule);\n        const invokeRouteModule = async (span)=>routeModule.render(req, res, {\n                query: {\n                    ...query,\n                    ...params\n                },\n                params,\n                allowedRevalidateHeaderKeys: undefined,\n                multiZoneDraftMode: Boolean(\"false\"),\n                trustHostHeader: undefined,\n                // TODO: get this from from runtime env so manifest\n                // doesn't need to load\n                previewProps: prerenderManifest.preview,\n                propagateError: false,\n                dev: routeModule.isDev,\n                page: \"/api/update-all-data\",\n                projectDir:  false || '',\n                onError: (...args)=>onRequestError(req, ...args)\n            }).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await invokeRouteModule(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, invokeRouteModule));\n        }\n    } catch (err) {\n        // we re-throw in dev to show the error overlay\n        if (routeModule.isDev) {\n            throw err;\n        }\n        // this is technically an invariant as error handling\n        // should be done inside of api-resolver onError\n        (0,next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__.sendError)(res, 500, 'Internal Server Error');\n    } finally{\n        // We don't allow any waitUntil work in pages API routes currently\n        // so if callback is present return with resolved promise since no\n        // pending work\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n    }\n}\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fupdate-all-data&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cupdate-all-data.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/update-all-data.js":
/*!**************************************!*\
  !*** ./pages/api/update-all-data.js ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pg */ \"pg\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([pg__WEBPACK_IMPORTED_MODULE_0__]);\npg__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// /api/update-all-data.js - 统一的数据更新和标签计算API\n\n// 检查是否应该使用模拟数据\nfunction shouldUseMockData() {\n    const dbUrl = process.env.NEON_DATABASE_URL;\n    return !dbUrl || dbUrl.includes('your-database-url') || dbUrl.includes('placeholder');\n}\nconst pool = shouldUseMockData() ? null : new pg__WEBPACK_IMPORTED_MODULE_0__.Pool({\n    connectionString: process.env.NEON_DATABASE_URL,\n    ssl: {\n        rejectUnauthorized: false\n    }\n});\n// --- 辅助函数 1: 从 Polygon 高效获取全市场快照 ---\nasync function getPolygonSnapshot(apiKey) {\n    try {\n        const response = await fetch(`https://api.polygon.io/v2/snapshot/locale/us/markets/stocks/tickers?apikey=${apiKey}`);\n        if (!response.ok) {\n            throw new Error(`Polygon API error: ${response.status}`);\n        }\n        const data = await response.json();\n        const snapshot = new Map();\n        if (data.results && Array.isArray(data.results)) {\n            data.results.forEach((ticker)=>{\n                if (ticker.value && ticker.value.c && ticker.value.o) {\n                    snapshot.set(ticker.ticker, {\n                        c: ticker.value.c,\n                        o: ticker.value.o,\n                        h: ticker.value.h,\n                        l: ticker.value.l,\n                        v: ticker.value.v // 成交量\n                    });\n                }\n            });\n        }\n        console.log(`Polygon snapshot: ${snapshot.size} tickers fetched`);\n        return snapshot;\n    } catch (error) {\n        console.error('Error fetching Polygon snapshot:', error);\n        return new Map();\n    }\n}\n// --- 辅助函数 2: 从 Finnhub 获取单只股票的财务指标 ---\nasync function getFinnhubMetrics(symbol, apiKey) {\n    try {\n        const response = await fetch(`https://finnhub.io/api/v1/stock/metric?symbol=${symbol}&metric=all&token=${apiKey}`);\n        if (!response.ok) {\n            if (response.status === 429) {\n                console.warn(`Rate limit hit for ${symbol}, skipping...`);\n                return null;\n            }\n            throw new Error(`Finnhub API error: ${response.status}`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error(`Error fetching Finnhub data for ${symbol}:`, error.message);\n        return null;\n    }\n}\n// --- 辅助函数 3: 应用标签 ---\nasync function applyTag(tagName, tagType, tickers, client) {\n    if (!tickers || tickers.length === 0) {\n        console.log(`No stocks qualify for tag: ${tagName}`);\n        return;\n    }\n    try {\n        // 确保标签存在\n        const { rows: existingTags } = await client.query('SELECT id FROM tags WHERE name = $1', [\n            tagName\n        ]);\n        let tagId;\n        if (existingTags.length > 0) {\n            tagId = existingTags[0].id;\n        } else {\n            const { rows: newTag } = await client.query('INSERT INTO tags (name, type) VALUES ($1, $2) RETURNING id', [\n                tagName,\n                tagType\n            ]);\n            tagId = newTag[0].id;\n        }\n        // 批量插入股票标签关联\n        for (const ticker of tickers){\n            await client.query('INSERT INTO stock_tags (stock_ticker, tag_id) VALUES ($1, $2) ON CONFLICT DO NOTHING', [\n                ticker,\n                tagId\n            ]);\n        }\n        console.log(`Applied tag \"${tagName}\" to ${tickers.length} stocks`);\n    } catch (error) {\n        console.error(`Error applying tag ${tagName}:`, error.message);\n    }\n}\n// --- 辅助函数 4: 计算市值分类标签 ---\nasync function calculateMarketCapTags(allStocks, client) {\n    const validStocks = allStocks.filter((s)=>s.market_cap && s.market_cap > 0);\n    if (validStocks.length === 0) return;\n    // 按市值排序\n    validStocks.sort((a, b)=>b.market_cap - a.market_cap);\n    const total = validStocks.length;\n    const largeCapCount = Math.floor(total * 0.3); // 前30%为大盘股\n    const midCapCount = Math.floor(total * 0.4); // 中间40%为中盘股\n    const largeCapStocks = validStocks.slice(0, largeCapCount).map((s)=>s.ticker);\n    const midCapStocks = validStocks.slice(largeCapCount, largeCapCount + midCapCount).map((s)=>s.ticker);\n    const smallCapStocks = validStocks.slice(largeCapCount + midCapCount).map((s)=>s.ticker);\n    await applyTag('大盘股', 'dynamic', largeCapStocks, client);\n    await applyTag('中盘股', 'dynamic', midCapStocks, client);\n    await applyTag('小盘股', 'dynamic', smallCapStocks, client);\n}\n// --- 辅助函数 5: 计算价格分类标签 ---\nasync function calculatePriceTags(allStocks, client) {\n    const validStocks = allStocks.filter((s)=>s.last_price && s.last_price > 0);\n    if (validStocks.length === 0) return;\n    const highPriceStocks = validStocks.filter((s)=>s.last_price >= 200).map((s)=>s.ticker);\n    const midPriceStocks = validStocks.filter((s)=>s.last_price >= 50 && s.last_price < 200).map((s)=>s.ticker);\n    const lowPriceStocks = validStocks.filter((s)=>s.last_price < 50).map((s)=>s.ticker);\n    await applyTag('高价股', 'dynamic', highPriceStocks, client);\n    await applyTag('中价股', 'dynamic', midPriceStocks, client);\n    await applyTag('低价股', 'dynamic', lowPriceStocks, client);\n}\n// --- 辅助函数 6: 计算涨跌幅标签 ---\nasync function calculateChangeTags(allStocks, client) {\n    const validStocks = allStocks.filter((s)=>s.change_percent !== null && s.change_percent !== undefined);\n    if (validStocks.length === 0) return;\n    const strongUpStocks = validStocks.filter((s)=>s.change_percent >= 5).map((s)=>s.ticker);\n    const mildUpStocks = validStocks.filter((s)=>s.change_percent > 0 && s.change_percent < 5).map((s)=>s.ticker);\n    const mildDownStocks = validStocks.filter((s)=>s.change_percent < 0 && s.change_percent >= -5).map((s)=>s.ticker);\n    const strongDownStocks = validStocks.filter((s)=>s.change_percent < -5).map((s)=>s.ticker);\n    await applyTag('强势上涨', 'dynamic', strongUpStocks, client);\n    await applyTag('温和上涨', 'dynamic', mildUpStocks, client);\n    await applyTag('温和下跌', 'dynamic', mildDownStocks, client);\n    await applyTag('大幅下跌', 'dynamic', strongDownStocks, client);\n}\n// --- API 主处理函数 ---\nasync function handler(req, res) {\n    // 安全校验\n    if (req.headers['authorization'] !== `Bearer ${process.env.CRON_SECRET}`) {\n        return res.status(401).json({\n            error: 'Unauthorized'\n        });\n    }\n    // 检查是否使用模拟模式\n    if (shouldUseMockData() || !pool) {\n        console.log(\"Using mock mode - database not configured\");\n        return res.status(200).json({\n            success: true,\n            message: \"Mock mode: All data and tags updated successfully (simulated)\",\n            mode: \"mock\",\n            timestamp: new Date().toISOString()\n        });\n    }\n    let client;\n    try {\n        client = await pool.connect();\n    } catch (error) {\n        console.log(\"Database connection failed, using mock mode:\", error.message);\n        return res.status(200).json({\n            success: true,\n            message: \"Mock mode: Database connection failed, simulated update completed\",\n            mode: \"mock\",\n            error: error.message,\n            timestamp: new Date().toISOString()\n        });\n    }\n    console.log(\"===== Starting unified data injection & tag update job =====\");\n    try {\n        await client.query('BEGIN');\n        // Step 1: 获取所有股票列表\n        const { rows: companies } = await client.query('SELECT ticker FROM stocks');\n        console.log(`Step 1: Found ${companies.length} companies in DB.`);\n        // Step 2: 并行获取 Polygon 市场快照 和 Finnhub 财务指标\n        console.log(\"Step 2: Fetching data from Polygon (market) and Finnhub (financials)...\");\n        const polygonSnapshot = await getPolygonSnapshot(process.env.POLYGON_API_KEY);\n        let successUpdateCount = 0;\n        for (const company of companies){\n            const ticker = company.ticker;\n            // 为了避免短时间请求过多Finnhub，我们加入一个微小的延迟\n            await new Promise((resolve)=>setTimeout(resolve, 100)); // 100毫秒延迟\n            const marketData = polygonSnapshot.get(ticker);\n            const financialData = await getFinnhubMetrics(ticker, process.env.FINNHUB_API_KEY);\n            const updates = {};\n            const values = [];\n            let queryIndex = 1;\n            // 更新市场数据\n            if (marketData) {\n                updates.last_price = `$${queryIndex++}`;\n                values.push(marketData.c);\n                if (marketData.o > 0) {\n                    updates.change_percent = `$${queryIndex++}`;\n                    values.push((marketData.c - marketData.o) / marketData.o * 100);\n                }\n                updates.volume = `$${queryIndex++}`;\n                values.push(marketData.v);\n            }\n            // 更新财务数据\n            if (financialData && financialData.metric) {\n                const metric = financialData.metric;\n                if (metric.marketCapitalization) {\n                    updates.market_cap = `$${queryIndex++}`;\n                    values.push(metric.marketCapitalization * 1000000); // Finnhub返回的是百万美元单位\n                }\n                if (metric.roeTTM) {\n                    updates.roe_ttm = `$${queryIndex++}`;\n                    values.push(metric.roeTTM);\n                }\n                if (metric.peTTM) {\n                    updates.pe_ttm = `$${queryIndex++}`;\n                    values.push(metric.peTTM);\n                }\n                if (metric['52WeekHigh']) {\n                    updates.week_52_high = `$${queryIndex++}`;\n                    values.push(metric['52WeekHigh']);\n                }\n                if (metric['52WeekLow']) {\n                    updates.week_52_low = `$${queryIndex++}`;\n                    values.push(metric['52WeekLow']);\n                }\n                if (metric.dividendYieldAnnual) {\n                    updates.dividend_yield = `$${queryIndex++}`;\n                    values.push(metric.dividendYieldAnnual);\n                }\n            }\n            // 执行更新\n            if (Object.keys(updates).length > 0) {\n                updates.last_updated = 'NOW()';\n                const setClauses = Object.keys(updates).map((key)=>`${key} = ${updates[key]}`).join(', ');\n                await client.query(`UPDATE stocks SET ${setClauses} WHERE ticker = $${queryIndex}`, [\n                    ...values,\n                    ticker\n                ]);\n                successUpdateCount++;\n            }\n        }\n        console.log(`Step 2 Complete: Updated data for ${successUpdateCount} stocks.`);\n        // Step 3: 清理并重新计算动态标签\n        console.log(\"Step 3: Recalculating dynamic tags...\");\n        await client.query(`DELETE FROM stock_tags WHERE tag_id IN (SELECT id FROM tags WHERE type = 'dynamic');`);\n        // 获取所有股票数据用于标签计算\n        const { rows: allStocks } = await client.query('SELECT ticker, roe_ttm, week_52_high, week_52_low, last_price, change_percent, market_cap, pe_ttm, dividend_yield FROM stocks');\n        // 计算各种动态标签\n        await calculateMarketCapTags(allStocks, client);\n        await calculatePriceTags(allStocks, client);\n        await calculateChangeTags(allStocks, client);\n        // 计算财务表现标签\n        const highRoeStocks = allStocks.filter((s)=>s.roe_ttm && s.roe_ttm > 20).map((s)=>s.ticker);\n        await applyTag('高ROE', 'dynamic', highRoeStocks, client);\n        const lowPeStocks = allStocks.filter((s)=>s.pe_ttm && s.pe_ttm > 0 && s.pe_ttm < 15).map((s)=>s.ticker);\n        await applyTag('低市盈率', 'dynamic', lowPeStocks, client);\n        const highDividendStocks = allStocks.filter((s)=>s.dividend_yield && s.dividend_yield > 3).map((s)=>s.ticker);\n        await applyTag('高股息', 'dynamic', highDividendStocks, client);\n        // 计算技术指标标签\n        const newHighStocks = allStocks.filter((s)=>s.last_price && s.week_52_high && s.last_price >= s.week_52_high * 0.98).map((s)=>s.ticker);\n        await applyTag('52周新高', 'dynamic', newHighStocks, client);\n        const newLowStocks = allStocks.filter((s)=>s.last_price && s.week_52_low && s.last_price <= s.week_52_low * 1.02).map((s)=>s.ticker);\n        await applyTag('52周新低', 'dynamic', newLowStocks, client);\n        console.log(\"Step 3 Complete: Dynamic tags recalculated.\");\n        await client.query('COMMIT');\n        const response = {\n            success: true,\n            message: `Unified update completed successfully.`,\n            stats: {\n                stocksUpdated: successUpdateCount,\n                totalStocks: companies.length,\n                tagsRecalculated: true\n            },\n            timestamp: new Date().toISOString()\n        };\n        console.log(\"===== Job completed successfully =====\", response.stats);\n        res.status(200).json(response);\n    } catch (error) {\n        await client.query('ROLLBACK');\n        console.error(\"!!!!! Unified job FAILED !!!!!\", error);\n        res.status(500).json({\n            success: false,\n            error: error.message,\n            timestamp: new Date().toISOString()\n        });\n    } finally{\n        client.release();\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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U0FBU3lILEtBQUs7UUFDcEUvQyxJQUFJdEUsTUFBTSxDQUFDLEtBQUtFLElBQUksQ0FBQ047SUFFekIsRUFBRSxPQUFPd0IsT0FBTztRQUNaLE1BQU1TLE9BQU9JLEtBQUssQ0FBQztRQUNuQmhCLFFBQVFHLEtBQUssQ0FBQyxrQ0FBa0NBO1FBQ2hEa0QsSUFBSXRFLE1BQU0sQ0FBQyxLQUFLRSxJQUFJLENBQUM7WUFDakJ1RSxTQUFTO1lBQ1RyRCxPQUFPQSxNQUFNSSxPQUFPO1lBQ3BCbUQsV0FBVyxJQUFJQyxPQUFPQyxXQUFXO1FBQ3JDO0lBQ0osU0FBVTtRQUNOaEQsT0FBTzRGLE9BQU87SUFDbEI7QUFDSiIsInNvdXJjZXMiOlsiRDpcXOS6p+WTgeW8gOWPkVxc5paw6aG555uuXFxUYWctRXhwbG9yZXJcXHBhZ2VzXFxhcGlcXHVwZGF0ZS1hbGwtZGF0YS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAvYXBpL3VwZGF0ZS1hbGwtZGF0YS5qcyAtIOe7n+S4gOeahOaVsOaNruabtOaWsOWSjOagh+etvuiuoeeul0FQSVxuaW1wb3J0IHsgUG9vbCB9IGZyb20gJ3BnJztcblxuLy8g5qOA5p+l5piv5ZCm5bqU6K+l5L2/55So5qih5ouf5pWw5o2uXG5mdW5jdGlvbiBzaG91bGRVc2VNb2NrRGF0YSgpIHtcbiAgICBjb25zdCBkYlVybCA9IHByb2Nlc3MuZW52Lk5FT05fREFUQUJBU0VfVVJMO1xuICAgIHJldHVybiAhZGJVcmwgfHwgZGJVcmwuaW5jbHVkZXMoJ3lvdXItZGF0YWJhc2UtdXJsJykgfHwgZGJVcmwuaW5jbHVkZXMoJ3BsYWNlaG9sZGVyJyk7XG59XG5cbmNvbnN0IHBvb2wgPSBzaG91bGRVc2VNb2NrRGF0YSgpID8gbnVsbCA6IG5ldyBQb29sKHtcbiAgICBjb25uZWN0aW9uU3RyaW5nOiBwcm9jZXNzLmVudi5ORU9OX0RBVEFCQVNFX1VSTCxcbiAgICBzc2w6IHsgcmVqZWN0VW5hdXRob3JpemVkOiBmYWxzZSB9LFxufSk7XG5cbi8vIC0tLSDovoXliqnlh73mlbAgMTog5LuOIFBvbHlnb24g6auY5pWI6I635Y+W5YWo5biC5Zy65b+r54WnIC0tLVxuYXN5bmMgZnVuY3Rpb24gZ2V0UG9seWdvblNuYXBzaG90KGFwaUtleSkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYGh0dHBzOi8vYXBpLnBvbHlnb24uaW8vdjIvc25hcHNob3QvbG9jYWxlL3VzL21hcmtldHMvc3RvY2tzL3RpY2tlcnM/YXBpa2V5PSR7YXBpS2V5fWApO1xuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFBvbHlnb24gQVBJIGVycm9yOiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICBcbiAgICAgICAgY29uc3Qgc25hcHNob3QgPSBuZXcgTWFwKCk7XG4gICAgICAgIGlmIChkYXRhLnJlc3VsdHMgJiYgQXJyYXkuaXNBcnJheShkYXRhLnJlc3VsdHMpKSB7XG4gICAgICAgICAgICBkYXRhLnJlc3VsdHMuZm9yRWFjaCh0aWNrZXIgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aWNrZXIudmFsdWUgJiYgdGlja2VyLnZhbHVlLmMgJiYgdGlja2VyLnZhbHVlLm8pIHtcbiAgICAgICAgICAgICAgICAgICAgc25hcHNob3Quc2V0KHRpY2tlci50aWNrZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGM6IHRpY2tlci52YWx1ZS5jLCAgLy8g5pS255uY5Lu3XG4gICAgICAgICAgICAgICAgICAgICAgICBvOiB0aWNrZXIudmFsdWUubywgIC8vIOW8gOebmOS7t1xuICAgICAgICAgICAgICAgICAgICAgICAgaDogdGlja2VyLnZhbHVlLmgsICAvLyDmnIDpq5jku7dcbiAgICAgICAgICAgICAgICAgICAgICAgIGw6IHRpY2tlci52YWx1ZS5sLCAgLy8g5pyA5L2O5Lu3XG4gICAgICAgICAgICAgICAgICAgICAgICB2OiB0aWNrZXIudmFsdWUudiAgIC8vIOaIkOS6pOmHj1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhgUG9seWdvbiBzbmFwc2hvdDogJHtzbmFwc2hvdC5zaXplfSB0aWNrZXJzIGZldGNoZWRgKTtcbiAgICAgICAgcmV0dXJuIHNuYXBzaG90O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIFBvbHlnb24gc25hcHNob3Q6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gbmV3IE1hcCgpO1xuICAgIH1cbn1cblxuLy8gLS0tIOi+heWKqeWHveaVsCAyOiDku44gRmlubmh1YiDojrflj5bljZXlj6rogqHnpajnmoTotKLliqHmjIfmoIcgLS0tXG5hc3luYyBmdW5jdGlvbiBnZXRGaW5uaHViTWV0cmljcyhzeW1ib2wsIGFwaUtleSkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYGh0dHBzOi8vZmlubmh1Yi5pby9hcGkvdjEvc3RvY2svbWV0cmljP3N5bWJvbD0ke3N5bWJvbH0mbWV0cmljPWFsbCZ0b2tlbj0ke2FwaUtleX1gKTtcbiAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDI5KSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBSYXRlIGxpbWl0IGhpdCBmb3IgJHtzeW1ib2x9LCBza2lwcGluZy4uLmApO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGaW5uaHViIEFQSSBlcnJvcjogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgZmV0Y2hpbmcgRmlubmh1YiBkYXRhIGZvciAke3N5bWJvbH06YCwgZXJyb3IubWVzc2FnZSk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuLy8gLS0tIOi+heWKqeWHveaVsCAzOiDlupTnlKjmoIfnrb4gLS0tXG5hc3luYyBmdW5jdGlvbiBhcHBseVRhZyh0YWdOYW1lLCB0YWdUeXBlLCB0aWNrZXJzLCBjbGllbnQpIHtcbiAgICBpZiAoIXRpY2tlcnMgfHwgdGlja2Vycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29uc29sZS5sb2coYE5vIHN0b2NrcyBxdWFsaWZ5IGZvciB0YWc6ICR7dGFnTmFtZX1gKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICB0cnkge1xuICAgICAgICAvLyDnoa7kv53moIfnrb7lrZjlnKhcbiAgICAgICAgY29uc3QgeyByb3dzOiBleGlzdGluZ1RhZ3MgfSA9IGF3YWl0IGNsaWVudC5xdWVyeShcbiAgICAgICAgICAgICdTRUxFQ1QgaWQgRlJPTSB0YWdzIFdIRVJFIG5hbWUgPSAkMScsXG4gICAgICAgICAgICBbdGFnTmFtZV1cbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIGxldCB0YWdJZDtcbiAgICAgICAgaWYgKGV4aXN0aW5nVGFncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0YWdJZCA9IGV4aXN0aW5nVGFnc1swXS5pZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHsgcm93czogbmV3VGFnIH0gPSBhd2FpdCBjbGllbnQucXVlcnkoXG4gICAgICAgICAgICAgICAgJ0lOU0VSVCBJTlRPIHRhZ3MgKG5hbWUsIHR5cGUpIFZBTFVFUyAoJDEsICQyKSBSRVRVUk5JTkcgaWQnLFxuICAgICAgICAgICAgICAgIFt0YWdOYW1lLCB0YWdUeXBlXVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRhZ0lkID0gbmV3VGFnWzBdLmlkO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyDmibnph4/mj5LlhaXogqHnpajmoIfnrb7lhbPogZRcbiAgICAgICAgZm9yIChjb25zdCB0aWNrZXIgb2YgdGlja2Vycykge1xuICAgICAgICAgICAgYXdhaXQgY2xpZW50LnF1ZXJ5KFxuICAgICAgICAgICAgICAgICdJTlNFUlQgSU5UTyBzdG9ja190YWdzIChzdG9ja190aWNrZXIsIHRhZ19pZCkgVkFMVUVTICgkMSwgJDIpIE9OIENPTkZMSUNUIERPIE5PVEhJTkcnLFxuICAgICAgICAgICAgICAgIFt0aWNrZXIsIHRhZ0lkXVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coYEFwcGxpZWQgdGFnIFwiJHt0YWdOYW1lfVwiIHRvICR7dGlja2Vycy5sZW5ndGh9IHN0b2Nrc2ApO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGFwcGx5aW5nIHRhZyAke3RhZ05hbWV9OmAsIGVycm9yLm1lc3NhZ2UpO1xuICAgIH1cbn1cblxuLy8gLS0tIOi+heWKqeWHveaVsCA0OiDorqHnrpfluILlgLzliIbnsbvmoIfnrb4gLS0tXG5hc3luYyBmdW5jdGlvbiBjYWxjdWxhdGVNYXJrZXRDYXBUYWdzKGFsbFN0b2NrcywgY2xpZW50KSB7XG4gICAgY29uc3QgdmFsaWRTdG9ja3MgPSBhbGxTdG9ja3MuZmlsdGVyKHMgPT4gcy5tYXJrZXRfY2FwICYmIHMubWFya2V0X2NhcCA+IDApO1xuICAgIGlmICh2YWxpZFN0b2Nrcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBcbiAgICAvLyDmjInluILlgLzmjpLluo9cbiAgICB2YWxpZFN0b2Nrcy5zb3J0KChhLCBiKSA9PiBiLm1hcmtldF9jYXAgLSBhLm1hcmtldF9jYXApO1xuICAgIFxuICAgIGNvbnN0IHRvdGFsID0gdmFsaWRTdG9ja3MubGVuZ3RoO1xuICAgIGNvbnN0IGxhcmdlQ2FwQ291bnQgPSBNYXRoLmZsb29yKHRvdGFsICogMC4zKTsgIC8vIOWJjTMwJeS4uuWkp+ebmOiCoVxuICAgIGNvbnN0IG1pZENhcENvdW50ID0gTWF0aC5mbG9vcih0b3RhbCAqIDAuNCk7ICAgIC8vIOS4remXtDQwJeS4uuS4reebmOiCoVxuICAgIFxuICAgIGNvbnN0IGxhcmdlQ2FwU3RvY2tzID0gdmFsaWRTdG9ja3Muc2xpY2UoMCwgbGFyZ2VDYXBDb3VudCkubWFwKHMgPT4gcy50aWNrZXIpO1xuICAgIGNvbnN0IG1pZENhcFN0b2NrcyA9IHZhbGlkU3RvY2tzLnNsaWNlKGxhcmdlQ2FwQ291bnQsIGxhcmdlQ2FwQ291bnQgKyBtaWRDYXBDb3VudCkubWFwKHMgPT4gcy50aWNrZXIpO1xuICAgIGNvbnN0IHNtYWxsQ2FwU3RvY2tzID0gdmFsaWRTdG9ja3Muc2xpY2UobGFyZ2VDYXBDb3VudCArIG1pZENhcENvdW50KS5tYXAocyA9PiBzLnRpY2tlcik7XG4gICAgXG4gICAgYXdhaXQgYXBwbHlUYWcoJ+Wkp+ebmOiCoScsICdkeW5hbWljJywgbGFyZ2VDYXBTdG9ja3MsIGNsaWVudCk7XG4gICAgYXdhaXQgYXBwbHlUYWcoJ+S4reebmOiCoScsICdkeW5hbWljJywgbWlkQ2FwU3RvY2tzLCBjbGllbnQpO1xuICAgIGF3YWl0IGFwcGx5VGFnKCflsI/nm5jogqEnLCAnZHluYW1pYycsIHNtYWxsQ2FwU3RvY2tzLCBjbGllbnQpO1xufVxuXG4vLyAtLS0g6L6F5Yqp5Ye95pWwIDU6IOiuoeeul+S7t+agvOWIhuexu+agh+etviAtLS1cbmFzeW5jIGZ1bmN0aW9uIGNhbGN1bGF0ZVByaWNlVGFncyhhbGxTdG9ja3MsIGNsaWVudCkge1xuICAgIGNvbnN0IHZhbGlkU3RvY2tzID0gYWxsU3RvY2tzLmZpbHRlcihzID0+IHMubGFzdF9wcmljZSAmJiBzLmxhc3RfcHJpY2UgPiAwKTtcbiAgICBpZiAodmFsaWRTdG9ja3MubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgXG4gICAgY29uc3QgaGlnaFByaWNlU3RvY2tzID0gdmFsaWRTdG9ja3MuZmlsdGVyKHMgPT4gcy5sYXN0X3ByaWNlID49IDIwMCkubWFwKHMgPT4gcy50aWNrZXIpO1xuICAgIGNvbnN0IG1pZFByaWNlU3RvY2tzID0gdmFsaWRTdG9ja3MuZmlsdGVyKHMgPT4gcy5sYXN0X3ByaWNlID49IDUwICYmIHMubGFzdF9wcmljZSA8IDIwMCkubWFwKHMgPT4gcy50aWNrZXIpO1xuICAgIGNvbnN0IGxvd1ByaWNlU3RvY2tzID0gdmFsaWRTdG9ja3MuZmlsdGVyKHMgPT4gcy5sYXN0X3ByaWNlIDwgNTApLm1hcChzID0+IHMudGlja2VyKTtcbiAgICBcbiAgICBhd2FpdCBhcHBseVRhZygn6auY5Lu36IKhJywgJ2R5bmFtaWMnLCBoaWdoUHJpY2VTdG9ja3MsIGNsaWVudCk7XG4gICAgYXdhaXQgYXBwbHlUYWcoJ+S4reS7t+iCoScsICdkeW5hbWljJywgbWlkUHJpY2VTdG9ja3MsIGNsaWVudCk7XG4gICAgYXdhaXQgYXBwbHlUYWcoJ+S9juS7t+iCoScsICdkeW5hbWljJywgbG93UHJpY2VTdG9ja3MsIGNsaWVudCk7XG59XG5cbi8vIC0tLSDovoXliqnlh73mlbAgNjog6K6h566X5rao6LeM5bmF5qCH562+IC0tLVxuYXN5bmMgZnVuY3Rpb24gY2FsY3VsYXRlQ2hhbmdlVGFncyhhbGxTdG9ja3MsIGNsaWVudCkge1xuICAgIGNvbnN0IHZhbGlkU3RvY2tzID0gYWxsU3RvY2tzLmZpbHRlcihzID0+IHMuY2hhbmdlX3BlcmNlbnQgIT09IG51bGwgJiYgcy5jaGFuZ2VfcGVyY2VudCAhPT0gdW5kZWZpbmVkKTtcbiAgICBpZiAodmFsaWRTdG9ja3MubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgXG4gICAgY29uc3Qgc3Ryb25nVXBTdG9ja3MgPSB2YWxpZFN0b2Nrcy5maWx0ZXIocyA9PiBzLmNoYW5nZV9wZXJjZW50ID49IDUpLm1hcChzID0+IHMudGlja2VyKTtcbiAgICBjb25zdCBtaWxkVXBTdG9ja3MgPSB2YWxpZFN0b2Nrcy5maWx0ZXIocyA9PiBzLmNoYW5nZV9wZXJjZW50ID4gMCAmJiBzLmNoYW5nZV9wZXJjZW50IDwgNSkubWFwKHMgPT4gcy50aWNrZXIpO1xuICAgIGNvbnN0IG1pbGREb3duU3RvY2tzID0gdmFsaWRTdG9ja3MuZmlsdGVyKHMgPT4gcy5jaGFuZ2VfcGVyY2VudCA8IDAgJiYgcy5jaGFuZ2VfcGVyY2VudCA+PSAtNSkubWFwKHMgPT4gcy50aWNrZXIpO1xuICAgIGNvbnN0IHN0cm9uZ0Rvd25TdG9ja3MgPSB2YWxpZFN0b2Nrcy5maWx0ZXIocyA9PiBzLmNoYW5nZV9wZXJjZW50IDwgLTUpLm1hcChzID0+IHMudGlja2VyKTtcbiAgICBcbiAgICBhd2FpdCBhcHBseVRhZygn5by65Yq/5LiK5raoJywgJ2R5bmFtaWMnLCBzdHJvbmdVcFN0b2NrcywgY2xpZW50KTtcbiAgICBhd2FpdCBhcHBseVRhZygn5rip5ZKM5LiK5raoJywgJ2R5bmFtaWMnLCBtaWxkVXBTdG9ja3MsIGNsaWVudCk7XG4gICAgYXdhaXQgYXBwbHlUYWcoJ+a4qeWSjOS4i+i3jCcsICdkeW5hbWljJywgbWlsZERvd25TdG9ja3MsIGNsaWVudCk7XG4gICAgYXdhaXQgYXBwbHlUYWcoJ+Wkp+W5heS4i+i3jCcsICdkeW5hbWljJywgc3Ryb25nRG93blN0b2NrcywgY2xpZW50KTtcbn1cblxuLy8gLS0tIEFQSSDkuLvlpITnkIblh73mlbAgLS0tXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBoYW5kbGVyKHJlcSwgcmVzKSB7XG4gICAgLy8g5a6J5YWo5qCh6aqMXG4gICAgaWYgKHJlcS5oZWFkZXJzWydhdXRob3JpemF0aW9uJ10gIT09IGBCZWFyZXIgJHtwcm9jZXNzLmVudi5DUk9OX1NFQ1JFVH1gKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7IGVycm9yOiAnVW5hdXRob3JpemVkJyB9KTtcbiAgICB9XG5cblxuXG4gICAgLy8g5qOA5p+l5piv5ZCm5L2/55So5qih5ouf5qih5byPXG4gICAgaWYgKHNob3VsZFVzZU1vY2tEYXRhKCkgfHwgIXBvb2wpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJVc2luZyBtb2NrIG1vZGUgLSBkYXRhYmFzZSBub3QgY29uZmlndXJlZFwiKTtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgXG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlLCBcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwiTW9jayBtb2RlOiBBbGwgZGF0YSBhbmQgdGFncyB1cGRhdGVkIHN1Y2Nlc3NmdWxseSAoc2ltdWxhdGVkKVwiLFxuICAgICAgICAgICAgbW9kZTogXCJtb2NrXCIsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBsZXQgY2xpZW50O1xuICAgIHRyeSB7XG4gICAgICAgIGNsaWVudCA9IGF3YWl0IHBvb2wuY29ubmVjdCgpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiRGF0YWJhc2UgY29ubmVjdGlvbiBmYWlsZWQsIHVzaW5nIG1vY2sgbW9kZTpcIiwgZXJyb3IubWVzc2FnZSk7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbih7IFxuICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSwgXG4gICAgICAgICAgICBtZXNzYWdlOiBcIk1vY2sgbW9kZTogRGF0YWJhc2UgY29ubmVjdGlvbiBmYWlsZWQsIHNpbXVsYXRlZCB1cGRhdGUgY29tcGxldGVkXCIsXG4gICAgICAgICAgICBtb2RlOiBcIm1vY2tcIixcbiAgICAgICAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKFwiPT09PT0gU3RhcnRpbmcgdW5pZmllZCBkYXRhIGluamVjdGlvbiAmIHRhZyB1cGRhdGUgam9iID09PT09XCIpO1xuICAgIFxuICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGNsaWVudC5xdWVyeSgnQkVHSU4nKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFN0ZXAgMTog6I635Y+W5omA5pyJ6IKh56Wo5YiX6KGoXG4gICAgICAgIGNvbnN0IHsgcm93czogY29tcGFuaWVzIH0gPSBhd2FpdCBjbGllbnQucXVlcnkoJ1NFTEVDVCB0aWNrZXIgRlJPTSBzdG9ja3MnKTtcbiAgICAgICAgY29uc29sZS5sb2coYFN0ZXAgMTogRm91bmQgJHtjb21wYW5pZXMubGVuZ3RofSBjb21wYW5pZXMgaW4gREIuYCk7XG5cbiAgICAgICAgLy8gU3RlcCAyOiDlubbooYzojrflj5YgUG9seWdvbiDluILlnLrlv6vnhacg5ZKMIEZpbm5odWIg6LSi5Yqh5oyH5qCHXG4gICAgICAgIGNvbnNvbGUubG9nKFwiU3RlcCAyOiBGZXRjaGluZyBkYXRhIGZyb20gUG9seWdvbiAobWFya2V0KSBhbmQgRmlubmh1YiAoZmluYW5jaWFscykuLi5cIik7XG4gICAgICAgIGNvbnN0IHBvbHlnb25TbmFwc2hvdCA9IGF3YWl0IGdldFBvbHlnb25TbmFwc2hvdChwcm9jZXNzLmVudi5QT0xZR09OX0FQSV9LRVkpO1xuICAgICAgICBcbiAgICAgICAgbGV0IHN1Y2Nlc3NVcGRhdGVDb3VudCA9IDA7XG4gICAgICAgIGZvciAoY29uc3QgY29tcGFueSBvZiBjb21wYW5pZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHRpY2tlciA9IGNvbXBhbnkudGlja2VyO1xuICAgICAgICAgICAgLy8g5Li65LqG6YG/5YWN55+t5pe26Ze06K+35rGC6L+H5aSaRmlubmh1Yu+8jOaIkeS7rOWKoOWFpeS4gOS4quW+ruWwj+eahOW7tui/n1xuICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMCkpOyAvLyAxMDDmr6vnp5Llu7bov59cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgbWFya2V0RGF0YSA9IHBvbHlnb25TbmFwc2hvdC5nZXQodGlja2VyKTtcbiAgICAgICAgICAgIGNvbnN0IGZpbmFuY2lhbERhdGEgPSBhd2FpdCBnZXRGaW5uaHViTWV0cmljcyh0aWNrZXIsIHByb2Nlc3MuZW52LkZJTk5IVUJfQVBJX0tFWSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZXMgPSB7fTsgXG4gICAgICAgICAgICBjb25zdCB2YWx1ZXMgPSBbXTsgXG4gICAgICAgICAgICBsZXQgcXVlcnlJbmRleCA9IDE7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIOabtOaWsOW4guWcuuaVsOaNrlxuICAgICAgICAgICAgaWYgKG1hcmtldERhdGEpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVzLmxhc3RfcHJpY2UgPSBgJCR7cXVlcnlJbmRleCsrfWA7IFxuICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKG1hcmtldERhdGEuYyk7XG4gICAgICAgICAgICAgICAgaWYgKG1hcmtldERhdGEubyA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlcy5jaGFuZ2VfcGVyY2VudCA9IGAkJHtxdWVyeUluZGV4Kyt9YDsgXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKCgobWFya2V0RGF0YS5jIC0gbWFya2V0RGF0YS5vKSAvIG1hcmtldERhdGEubykgKiAxMDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB1cGRhdGVzLnZvbHVtZSA9IGAkJHtxdWVyeUluZGV4Kyt9YDtcbiAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaChtYXJrZXREYXRhLnYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDmm7TmlrDotKLliqHmlbDmja5cbiAgICAgICAgICAgIGlmIChmaW5hbmNpYWxEYXRhICYmIGZpbmFuY2lhbERhdGEubWV0cmljKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWV0cmljID0gZmluYW5jaWFsRGF0YS5tZXRyaWM7XG4gICAgICAgICAgICAgICAgaWYgKG1ldHJpYy5tYXJrZXRDYXBpdGFsaXphdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVzLm1hcmtldF9jYXAgPSBgJCR7cXVlcnlJbmRleCsrfWA7IFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaChtZXRyaWMubWFya2V0Q2FwaXRhbGl6YXRpb24gKiAxMDAwMDAwKTsgLy8gRmlubmh1Yui/lOWbnueahOaYr+eZvuS4h+e+juWFg+WNleS9jVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobWV0cmljLnJvZVRUTSkge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVzLnJvZV90dG0gPSBgJCR7cXVlcnlJbmRleCsrfWA7IFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaChtZXRyaWMucm9lVFRNKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1ldHJpYy5wZVRUTSkge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVzLnBlX3R0bSA9IGAkJHtxdWVyeUluZGV4Kyt9YDsgXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKG1ldHJpYy5wZVRUTSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtZXRyaWNbJzUyV2Vla0hpZ2gnXSkge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVzLndlZWtfNTJfaGlnaCA9IGAkJHtxdWVyeUluZGV4Kyt9YDsgXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKG1ldHJpY1snNTJXZWVrSGlnaCddKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1ldHJpY1snNTJXZWVrTG93J10pIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlcy53ZWVrXzUyX2xvdyA9IGAkJHtxdWVyeUluZGV4Kyt9YDsgXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKG1ldHJpY1snNTJXZWVrTG93J10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobWV0cmljLmRpdmlkZW5kWWllbGRBbm51YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlcy5kaXZpZGVuZF95aWVsZCA9IGAkJHtxdWVyeUluZGV4Kyt9YDsgXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKG1ldHJpYy5kaXZpZGVuZFlpZWxkQW5udWFsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIOaJp+ihjOabtOaWsFxuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHVwZGF0ZXMpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVzLmxhc3RfdXBkYXRlZCA9ICdOT1coKSc7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2V0Q2xhdXNlcyA9IE9iamVjdC5rZXlzKHVwZGF0ZXMpLm1hcChrZXkgPT4gYCR7a2V5fSA9ICR7dXBkYXRlc1trZXldfWApLmpvaW4oJywgJyk7XG4gICAgICAgICAgICAgICAgYXdhaXQgY2xpZW50LnF1ZXJ5KFxuICAgICAgICAgICAgICAgICAgICBgVVBEQVRFIHN0b2NrcyBTRVQgJHtzZXRDbGF1c2VzfSBXSEVSRSB0aWNrZXIgPSAkJHtxdWVyeUluZGV4fWAsIFxuICAgICAgICAgICAgICAgICAgICBbLi4udmFsdWVzLCB0aWNrZXJdXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBzdWNjZXNzVXBkYXRlQ291bnQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhgU3RlcCAyIENvbXBsZXRlOiBVcGRhdGVkIGRhdGEgZm9yICR7c3VjY2Vzc1VwZGF0ZUNvdW50fSBzdG9ja3MuYCk7XG5cbiAgICAgICAgLy8gU3RlcCAzOiDmuIXnkIblubbph43mlrDorqHnrpfliqjmgIHmoIfnrb5cbiAgICAgICAgY29uc29sZS5sb2coXCJTdGVwIDM6IFJlY2FsY3VsYXRpbmcgZHluYW1pYyB0YWdzLi4uXCIpO1xuICAgICAgICBhd2FpdCBjbGllbnQucXVlcnkoYERFTEVURSBGUk9NIHN0b2NrX3RhZ3MgV0hFUkUgdGFnX2lkIElOIChTRUxFQ1QgaWQgRlJPTSB0YWdzIFdIRVJFIHR5cGUgPSAnZHluYW1pYycpO2ApO1xuICAgICAgICBcbiAgICAgICAgLy8g6I635Y+W5omA5pyJ6IKh56Wo5pWw5o2u55So5LqO5qCH562+6K6h566XXG4gICAgICAgIGNvbnN0IHsgcm93czogYWxsU3RvY2tzIH0gPSBhd2FpdCBjbGllbnQucXVlcnkoXG4gICAgICAgICAgICAnU0VMRUNUIHRpY2tlciwgcm9lX3R0bSwgd2Vla181Ml9oaWdoLCB3ZWVrXzUyX2xvdywgbGFzdF9wcmljZSwgY2hhbmdlX3BlcmNlbnQsIG1hcmtldF9jYXAsIHBlX3R0bSwgZGl2aWRlbmRfeWllbGQgRlJPTSBzdG9ja3MnXG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICAvLyDorqHnrpflkITnp43liqjmgIHmoIfnrb5cbiAgICAgICAgYXdhaXQgY2FsY3VsYXRlTWFya2V0Q2FwVGFncyhhbGxTdG9ja3MsIGNsaWVudCk7XG4gICAgICAgIGF3YWl0IGNhbGN1bGF0ZVByaWNlVGFncyhhbGxTdG9ja3MsIGNsaWVudCk7XG4gICAgICAgIGF3YWl0IGNhbGN1bGF0ZUNoYW5nZVRhZ3MoYWxsU3RvY2tzLCBjbGllbnQpO1xuICAgICAgICBcbiAgICAgICAgLy8g6K6h566X6LSi5Yqh6KGo546w5qCH562+XG4gICAgICAgIGNvbnN0IGhpZ2hSb2VTdG9ja3MgPSBhbGxTdG9ja3MuZmlsdGVyKHMgPT4gcy5yb2VfdHRtICYmIHMucm9lX3R0bSA+IDIwKS5tYXAocyA9PiBzLnRpY2tlcik7XG4gICAgICAgIGF3YWl0IGFwcGx5VGFnKCfpq5hST0UnLCAnZHluYW1pYycsIGhpZ2hSb2VTdG9ja3MsIGNsaWVudCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBsb3dQZVN0b2NrcyA9IGFsbFN0b2Nrcy5maWx0ZXIocyA9PiBzLnBlX3R0bSAmJiBzLnBlX3R0bSA+IDAgJiYgcy5wZV90dG0gPCAxNSkubWFwKHMgPT4gcy50aWNrZXIpO1xuICAgICAgICBhd2FpdCBhcHBseVRhZygn5L2O5biC55uI546HJywgJ2R5bmFtaWMnLCBsb3dQZVN0b2NrcywgY2xpZW50KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGhpZ2hEaXZpZGVuZFN0b2NrcyA9IGFsbFN0b2Nrcy5maWx0ZXIocyA9PiBzLmRpdmlkZW5kX3lpZWxkICYmIHMuZGl2aWRlbmRfeWllbGQgPiAzKS5tYXAocyA9PiBzLnRpY2tlcik7XG4gICAgICAgIGF3YWl0IGFwcGx5VGFnKCfpq5jogqHmga8nLCAnZHluYW1pYycsIGhpZ2hEaXZpZGVuZFN0b2NrcywgY2xpZW50KTtcbiAgICAgICAgXG4gICAgICAgIC8vIOiuoeeul+aKgOacr+aMh+agh+agh+etvlxuICAgICAgICBjb25zdCBuZXdIaWdoU3RvY2tzID0gYWxsU3RvY2tzLmZpbHRlcihzID0+IFxuICAgICAgICAgICAgcy5sYXN0X3ByaWNlICYmIHMud2Vla181Ml9oaWdoICYmIHMubGFzdF9wcmljZSA+PSBzLndlZWtfNTJfaGlnaCAqIDAuOThcbiAgICAgICAgKS5tYXAocyA9PiBzLnRpY2tlcik7XG4gICAgICAgIGF3YWl0IGFwcGx5VGFnKCc1MuWRqOaWsOmrmCcsICdkeW5hbWljJywgbmV3SGlnaFN0b2NrcywgY2xpZW50KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IG5ld0xvd1N0b2NrcyA9IGFsbFN0b2Nrcy5maWx0ZXIocyA9PiBcbiAgICAgICAgICAgIHMubGFzdF9wcmljZSAmJiBzLndlZWtfNTJfbG93ICYmIHMubGFzdF9wcmljZSA8PSBzLndlZWtfNTJfbG93ICogMS4wMlxuICAgICAgICApLm1hcChzID0+IHMudGlja2VyKTtcbiAgICAgICAgYXdhaXQgYXBwbHlUYWcoJzUy5ZGo5paw5L2OJywgJ2R5bmFtaWMnLCBuZXdMb3dTdG9ja3MsIGNsaWVudCk7XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZyhcIlN0ZXAgMyBDb21wbGV0ZTogRHluYW1pYyB0YWdzIHJlY2FsY3VsYXRlZC5cIik7XG4gICAgICAgIFxuICAgICAgICBhd2FpdCBjbGllbnQucXVlcnkoJ0NPTU1JVCcpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgbWVzc2FnZTogYFVuaWZpZWQgdXBkYXRlIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkuYCxcbiAgICAgICAgICAgIHN0YXRzOiB7XG4gICAgICAgICAgICAgICAgc3RvY2tzVXBkYXRlZDogc3VjY2Vzc1VwZGF0ZUNvdW50LFxuICAgICAgICAgICAgICAgIHRvdGFsU3RvY2tzOiBjb21wYW5pZXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIHRhZ3NSZWNhbGN1bGF0ZWQ6IHRydWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coXCI9PT09PSBKb2IgY29tcGxldGVkIHN1Y2Nlc3NmdWxseSA9PT09PVwiLCByZXNwb25zZS5zdGF0cyk7XG4gICAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHJlc3BvbnNlKTtcbiAgICAgICAgXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgYXdhaXQgY2xpZW50LnF1ZXJ5KCdST0xMQkFDSycpO1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiISEhISEgVW5pZmllZCBqb2IgRkFJTEVEICEhISEhXCIsIGVycm9yKTtcbiAgICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLCBcbiAgICAgICAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgICAgfSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgICAgY2xpZW50LnJlbGVhc2UoKTtcbiAgICB9XG59Il0sIm5hbWVzIjpbIlBvb2wiLCJzaG91bGRVc2VNb2NrRGF0YSIsImRiVXJsIiwicHJvY2VzcyIsImVudiIsIk5FT05fREFUQUJBU0VfVVJMIiwiaW5jbHVkZXMiLCJwb29sIiwiY29ubmVjdGlvblN0cmluZyIsInNzbCIsInJlamVjdFVuYXV0aG9yaXplZCIsImdldFBvbHlnb25TbmFwc2hvdCIsImFwaUtleSIsInJlc3BvbnNlIiwiZmV0Y2giLCJvayIsIkVycm9yIiwic3RhdHVzIiwiZGF0YSIsImpzb24iLCJzbmFwc2hvdCIsIk1hcCIsInJlc3VsdHMiLCJBcnJheSIsImlzQXJyYXkiLCJmb3JFYWNoIiwidGlja2VyIiwidmFsdWUiLCJjIiwibyIsInNldCIsImgiLCJsIiwidiIsImNvbnNvbGUiLCJsb2ciLCJzaXplIiwiZXJyb3IiLCJnZXRGaW5uaHViTWV0cmljcyIsInN5bWJvbCIsIndhcm4iLCJtZXNzYWdlIiwiYXBwbHlUYWciLCJ0YWdOYW1lIiwidGFnVHlwZSIsInRpY2tlcnMiLCJjbGllbnQiLCJsZW5ndGgiLCJyb3dzIiwiZXhpc3RpbmdUYWdzIiwicXVlcnkiLCJ0YWdJZCIsImlkIiwibmV3VGFnIiwiY2FsY3VsYXRlTWFya2V0Q2FwVGFncyIsImFsbFN0b2NrcyIsInZhbGlkU3RvY2tzIiwiZmlsdGVyIiwicyIsIm1hcmtldF9jYXAiLCJzb3J0IiwiYSIsImIiLCJ0b3RhbCIsImxhcmdlQ2FwQ291bnQiLCJNYXRoIiwiZmxvb3IiLCJtaWRDYXBDb3VudCIsImxhcmdlQ2FwU3RvY2tzIiwic2xpY2UiLCJtYXAiLCJtaWRDYXBTdG9ja3MiLCJzbWFsbENhcFN0b2NrcyIsImNhbGN1bGF0ZVByaWNlVGFncyIsImxhc3RfcHJpY2UiLCJoaWdoUHJpY2VTdG9ja3MiLCJtaWRQcmljZVN0b2NrcyIsImxvd1ByaWNlU3RvY2tzIiwiY2FsY3VsYXRlQ2hhbmdlVGFncyIsImNoYW5nZV9wZXJjZW50IiwidW5kZWZpbmVkIiwic3Ryb25nVXBTdG9ja3MiLCJtaWxkVXBTdG9ja3MiLCJtaWxkRG93blN0b2NrcyIsInN0cm9uZ0Rvd25TdG9ja3MiLCJoYW5kbGVyIiwicmVxIiwicmVzIiwiaGVhZGVycyIsIkNST05fU0VDUkVUIiwic3VjY2VzcyIsIm1vZGUiLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJjb25uZWN0IiwiY29tcGFuaWVzIiwicG9seWdvblNuYXBzaG90IiwiUE9MWUdPTl9BUElfS0VZIiwic3VjY2Vzc1VwZGF0ZUNvdW50IiwiY29tcGFueSIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsIm1hcmtldERhdGEiLCJnZXQiLCJmaW5hbmNpYWxEYXRhIiwiRklOTkhVQl9BUElfS0VZIiwidXBkYXRlcyIsInZhbHVlcyIsInF1ZXJ5SW5kZXgiLCJwdXNoIiwidm9sdW1lIiwibWV0cmljIiwibWFya2V0Q2FwaXRhbGl6YXRpb24iLCJyb2VUVE0iLCJyb2VfdHRtIiwicGVUVE0iLCJwZV90dG0iLCJ3ZWVrXzUyX2hpZ2giLCJ3ZWVrXzUyX2xvdyIsImRpdmlkZW5kWWllbGRBbm51YWwiLCJkaXZpZGVuZF95aWVsZCIsIk9iamVjdCIsImtleXMiLCJsYXN0X3VwZGF0ZWQiLCJzZXRDbGF1c2VzIiwia2V5Iiwiam9pbiIsImhpZ2hSb2VTdG9ja3MiLCJsb3dQZVN0b2NrcyIsImhpZ2hEaXZpZGVuZFN0b2NrcyIsIm5ld0hpZ2hTdG9ja3MiLCJuZXdMb3dTdG9ja3MiLCJzdGF0cyIsInN0b2Nrc1VwZGF0ZWQiLCJ0b3RhbFN0b2NrcyIsInRhZ3NSZWNhbGN1bGF0ZWQiLCJyZWxlYXNlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/update-all-data.js\n");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

module.exports = import("pg");;

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fupdate-all-data&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cupdate-all-data.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();