"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/update-all-data";
exports.ids = ["pages/api/update-all-data"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

module.exports = import("pg");;

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fupdate-all-data&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cupdate-all-data.js&middlewareConfigBase64=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fupdate-all-data&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cupdate-all-data.js&middlewareConfigBase64=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_update_all_data_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\update-all-data.js */ \"(api)/./pages/api/update-all-data.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_update_all_data_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_update_all_data_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/update-all-data\",\n        pathname: \"/api/update-all-data\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_update_all_data_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnVwZGF0ZS1hbGwtZGF0YSZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTVDYXBpJTVDdXBkYXRlLWFsbC1kYXRhLmpzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNMO0FBQzFEO0FBQzZEO0FBQzdEO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQywwREFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMsMERBQVE7QUFDcEM7QUFDTyx3QkFBd0IsZ0hBQW1CO0FBQ2xEO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGFnLWV4cGxvcmVyLz9hZDNmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlc1xcXFxhcGlcXFxcdXBkYXRlLWFsbC1kYXRhLmpzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvdXBkYXRlLWFsbC1kYXRhXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvdXBkYXRlLWFsbC1kYXRhXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fupdate-all-data&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cupdate-all-data.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/update-all-data.js":
/*!**************************************!*\
  !*** ./pages/api/update-all-data.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n// /api/update-all-data.js - 统一的数据更新API\nasync function handler(req, res) {\n    // 验证授权\n    if (req.headers[\"authorization\"] !== `Bearer ${process.env.CRON_SECRET}`) {\n        return res.status(401).json({\n            error: \"Unauthorized\"\n        });\n    }\n    console.log(\"===== Starting unified data update job =====\");\n    try {\n        // 创建数据库连接池\n        const { Pool } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! pg */ \"pg\"));\n        const pool = new Pool({\n            connectionString: process.env.NEON_DATABASE_URL,\n            ssl: {\n                rejectUnauthorized: false\n            }\n        });\n        const client = await pool.connect();\n        try {\n            await client.query(\"BEGIN\");\n            // 第一步：更新股票基础数据\n            console.log(\"Step 1: Updating stock data...\");\n            await updateStockData(client);\n            // 第二步：更新动态标签\n            console.log(\"Step 2: Updating dynamic tags...\");\n            await updateDynamicTags(client);\n            await client.query(\"COMMIT\");\n            console.log(\"===== All updates completed successfully =====\");\n            res.status(200).json({\n                success: true,\n                message: \"All data updated successfully\",\n                timestamp: new Date().toISOString()\n            });\n        } catch (error) {\n            await client.query(\"ROLLBACK\");\n            throw error;\n        } finally{\n            client.release();\n            await pool.end();\n        }\n    } catch (error) {\n        console.error(\"Update job failed:\", error);\n        res.status(500).json({\n            error: \"Update failed\",\n            message: error.message,\n            timestamp: new Date().toISOString()\n        });\n    }\n}\n// 更新股票数据的函数\nasync function updateStockData(client) {\n    try {\n        // 获取Polygon快照数据\n        const polygonData = await getPolygonSnapshot(process.env.POLYGON_API_KEY);\n        if (!polygonData || polygonData.length === 0) {\n            console.log(\"No Polygon data available, skipping stock updates\");\n            return;\n        }\n        console.log(`Processing ${polygonData.length} stocks from Polygon`);\n        // 批量更新股票数据\n        for (const stock of polygonData.slice(0, 100)){\n            try {\n                const ticker = stock.T;\n                const closePrice = stock.c;\n                const changePercent = ((stock.c - stock.o) / stock.o * 100).toFixed(2);\n                // 获取Finnhub财务数据\n                const finnhubData = await getFinnhubMetrics(ticker, process.env.FINNHUB_API_KEY);\n                // 更新股票表\n                await client.query(`UPDATE stocks SET \n                     last_price = $1, \n                     change_percent = $2, \n                     market_cap = $3,\n                     last_updated = NOW()\n                     WHERE ticker = $4`, [\n                    closePrice,\n                    changePercent,\n                    finnhubData?.marketCapitalization,\n                    ticker\n                ]);\n            } catch (stockError) {\n                console.error(`Error updating stock ${stock.T}:`, stockError.message);\n                continue;\n            }\n        }\n        console.log(\"Stock data update completed\");\n    } catch (error) {\n        console.error(\"Stock data update failed:\", error);\n        throw error;\n    }\n}\n// 更新动态标签的函数\nasync function updateDynamicTags(client) {\n    try {\n        // 获取所有有数据的股票\n        const { rows: stocks } = await client.query(`SELECT ticker, name_zh, sector_zh, market_cap, last_price, \n             change_percent, volume, pe_ratio \n             FROM stocks \n             WHERE last_price IS NOT NULL \n             ORDER BY market_cap DESC NULLS LAST \n             LIMIT 200`);\n        console.log(`Processing dynamic tags for ${stocks.length} stocks`);\n        for (const stock of stocks){\n            try {\n                // 计算动态标签\n                const tags = calculateDynamicTags(stock);\n                // 清理旧的动态标签\n                await client.query(`DELETE FROM stock_tags \n                     WHERE stock_ticker = $1 \n                     AND tag_id IN (SELECT id FROM tags WHERE type = 'dynamic')`, [\n                    stock.ticker\n                ]);\n                // 应用新的动态标签\n                for (const tagName of tags){\n                    await applyTagToStock(client, stock.ticker, tagName, \"dynamic\");\n                }\n            } catch (tagError) {\n                console.error(`Error updating tags for ${stock.ticker}:`, tagError.message);\n                continue;\n            }\n        }\n        console.log(\"Dynamic tags update completed\");\n    } catch (error) {\n        console.error(\"Dynamic tags update failed:\", error);\n        throw error;\n    }\n}\n// 计算动态标签\nfunction calculateDynamicTags(stock) {\n    const tags = [];\n    // 基于市值的标签\n    if (stock.market_cap) {\n        if (stock.market_cap > 200000000000) tags.push(\"超大盘股\");\n        else if (stock.market_cap > 50000000000) tags.push(\"大盘股\");\n        else if (stock.market_cap > 10000000000) tags.push(\"中盘股\");\n        else if (stock.market_cap > 2000000000) tags.push(\"小盘股\");\n        else tags.push(\"微盘股\");\n    }\n    // 基于价格的标签\n    if (stock.last_price) {\n        if (stock.last_price > 500) tags.push(\"高价股\");\n        else if (stock.last_price > 100) tags.push(\"中价股\");\n        else if (stock.last_price < 10) tags.push(\"低价股\");\n    }\n    // 基于涨跌幅的标签\n    if (stock.change_percent) {\n        const change = parseFloat(stock.change_percent);\n        if (change > 5) tags.push(\"强势上涨\");\n        else if (change > 2) tags.push(\"温和上涨\");\n        else if (change < -5) tags.push(\"大幅下跌\");\n        else if (change < -2) tags.push(\"温和下跌\");\n    }\n    // 基于行业的标签\n    if (stock.sector_zh) {\n        tags.push(stock.sector_zh);\n    }\n    return tags;\n}\n// 应用标签到股票\nasync function applyTagToStock(client, ticker, tagName, tagType = \"dynamic\") {\n    try {\n        // 确保标签存在\n        const { rows: existingTags } = await client.query(\"SELECT id FROM tags WHERE name = $1 AND type = $2\", [\n            tagName,\n            tagType\n        ]);\n        let tagId;\n        if (existingTags.length > 0) {\n            tagId = existingTags[0].id;\n        } else {\n            // 创建新标签\n            const { rows: newTags } = await client.query(\"INSERT INTO tags (name, type) VALUES ($1, $2) RETURNING id\", [\n                tagName,\n                tagType\n            ]);\n            tagId = newTags[0].id;\n        }\n        // 关联股票和标签\n        await client.query(`INSERT INTO stock_tags (stock_ticker, tag_id) \n             VALUES ($1, $2) \n             ON CONFLICT (stock_ticker, tag_id) DO NOTHING`, [\n            ticker,\n            tagId\n        ]);\n    } catch (error) {\n        console.error(`Error applying tag ${tagName} to ${ticker}:`, error.message);\n    }\n}\n// 获取Polygon快照数据\nasync function getPolygonSnapshot(apiKey) {\n    let date = new Date();\n    for(let i = 0; i < 7; i++){\n        const tradeDate = date.toISOString().split(\"T\")[0];\n        const url = `https://api.polygon.io/v2/aggs/grouped/locale/us/market/stocks/${tradeDate}?adjusted=true&apiKey=${apiKey}`;\n        try {\n            console.log(`[Polygon] Attempting snapshot for ${tradeDate}...`);\n            const response = await fetch(url, {\n                signal: AbortSignal.timeout(15000)\n            });\n            if (response.ok) {\n                const data = await response.json();\n                if (data.results && data.results.length > 0) {\n                    console.log(`[Polygon] Success! Got ${data.results.length} stocks for ${tradeDate}`);\n                    return data.results;\n                }\n            }\n        } catch (error) {\n            console.log(`[Polygon] Failed for ${tradeDate}: ${error.message}`);\n        }\n        date.setDate(date.getDate() - 1);\n    }\n    return null;\n}\n// 获取Finnhub财务指标\nasync function getFinnhubMetrics(ticker, apiKey) {\n    try {\n        const url = `https://finnhub.io/api/v1/stock/metric?symbol=${ticker}&metric=all&token=${apiKey}`;\n        const response = await fetch(url, {\n            signal: AbortSignal.timeout(10000)\n        });\n        if (response.ok) {\n            const data = await response.json();\n            return data.metric;\n        }\n    } catch (error) {\n        console.log(`[Finnhub] Failed for ${ticker}: ${error.message}`);\n    }\n    return null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/update-all-data.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fupdate-all-data&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cupdate-all-data.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();